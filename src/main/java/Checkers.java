import java.awt.Cursor;
import java.awt.Toolkit;
import java.util.HashSet;
import java.util.Observable;
import java.util.Observer;
import java.util.Set;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * This class implements the Swing UI of the checkers program.
 * @author Aswin van Woudenberg
 */
public class Checkers extends JFrame implements Observer {
    private CheckersGame checkersGame;
    private Vector<Move> possibleMoves;
    private boolean gameHasEndedDialogShown;
    
    /** Creates new form Checkers */
    public Checkers() {
        initComponents();
        
        // adjust the form so that checkerBoard is 400x400
        setSize(getWidth()-(checkerBoard.getWidth()-400), 
                getHeight()-(checkerBoard.getHeight()-400));
        
        checkersGame = new CheckersGame();
        checkersGame.setLevel(9); // set Master level
        checkerBoard.setBoard(checkersGame.getBoard());
        checkersGame.getBoard().addObserver(checkerBoard);
        checkersGame.addObserver(this);
        update(checkersGame,null);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkerBoard = new CheckerBoard();
        menuBar = new javax.swing.JMenuBar();
        gameMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        separator1 = new javax.swing.JSeparator();
        undoMenuItem = new javax.swing.JMenuItem();
        separator2 = new javax.swing.JSeparator();
        playersMenu = new javax.swing.JMenu();
        blackMenu = new javax.swing.JMenu();
        blackHumanMenuItem = new javax.swing.JRadioButtonMenuItem();
        blackComputerMenuItem = new javax.swing.JRadioButtonMenuItem();
        whiteMenu = new javax.swing.JMenu();
        whiteHumanMenuItem = new javax.swing.JRadioButtonMenuItem();
        whiteComputerMenuItem = new javax.swing.JRadioButtonMenuItem();
        invertedMenuItem = new javax.swing.JCheckBoxMenuItem();
        separator3 = new javax.swing.JSeparator();
        levelMenu = new javax.swing.JMenu();
        beginnerMenuItem = new javax.swing.JRadioButtonMenuItem();
        noviceMenuItem = new javax.swing.JRadioButtonMenuItem();
        averageMenuItem = new javax.swing.JRadioButtonMenuItem();
        goodMenuItem = new javax.swing.JRadioButtonMenuItem();
        expertMenuItem = new javax.swing.JRadioButtonMenuItem();
        masterMenuItem = new javax.swing.JRadioButtonMenuItem();
        separator4 = new javax.swing.JSeparator();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Checkers");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("checkers.gif")));
        setLocationByPlatform(true);
        setName("checkersFrame"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        checkerBoard.setPreferredSize(new java.awt.Dimension(240, 240));
        checkerBoard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkerBoardMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout checkerBoardLayout = new javax.swing.GroupLayout(checkerBoard);
        checkerBoard.setLayout(checkerBoardLayout);
        checkerBoardLayout.setHorizontalGroup(
            checkerBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        checkerBoardLayout.setVerticalGroup(
            checkerBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        gameMenu.setMnemonic('g');
        gameMenu.setText("Game");

        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenuItem.setMnemonic('n');
        newMenuItem.setText("New");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        gameMenu.add(newMenuItem);
        gameMenu.add(separator1);

        undoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoMenuItem.setMnemonic('u');
        undoMenuItem.setText("Undo");
        undoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoMenuItemActionPerformed(evt);
            }
        });
        gameMenu.add(undoMenuItem);
        gameMenu.add(separator2);

        playersMenu.setMnemonic('p');
        playersMenu.setText("Players");

        blackMenu.setMnemonic('b');
        blackMenu.setText("Black");

        blackHumanMenuItem.setMnemonic('h');
        blackHumanMenuItem.setSelected(true);
        blackHumanMenuItem.setText("Human");
        blackHumanMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackHumanMenuItemActionPerformed(evt);
            }
        });
        blackMenu.add(blackHumanMenuItem);

        blackComputerMenuItem.setMnemonic('c');
        blackComputerMenuItem.setText("Computer");
        blackComputerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blackComputerMenuItemActionPerformed(evt);
            }
        });
        blackMenu.add(blackComputerMenuItem);

        playersMenu.add(blackMenu);

        whiteMenu.setMnemonic('w');
        whiteMenu.setText("White");

        whiteHumanMenuItem.setMnemonic('h');
        whiteHumanMenuItem.setText("Human");
        whiteHumanMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteHumanMenuItemActionPerformed(evt);
            }
        });
        whiteMenu.add(whiteHumanMenuItem);

        whiteComputerMenuItem.setMnemonic('c');
        whiteComputerMenuItem.setSelected(true);
        whiteComputerMenuItem.setText("Computer");
        whiteComputerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whiteComputerMenuItemActionPerformed(evt);
            }
        });
        whiteMenu.add(whiteComputerMenuItem);

        playersMenu.add(whiteMenu);

        gameMenu.add(playersMenu);

        invertedMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        invertedMenuItem.setMnemonic('i');
        invertedMenuItem.setText("Inverted");
        invertedMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invertedMenuItemActionPerformed(evt);
            }
        });
        gameMenu.add(invertedMenuItem);
        gameMenu.add(separator3);

        levelMenu.setMnemonic('l');
        levelMenu.setText("Level");

        beginnerMenuItem.setMnemonic('b');
        beginnerMenuItem.setText("Beginner");
        beginnerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beginnerMenuItemActionPerformed(evt);
            }
        });
        levelMenu.add(beginnerMenuItem);

        noviceMenuItem.setMnemonic('o');
        noviceMenuItem.setText("Novice");
        noviceMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noviceMenuItemActionPerformed(evt);
            }
        });
        levelMenu.add(noviceMenuItem);

        averageMenuItem.setMnemonic('a');
        averageMenuItem.setText("Average");
        averageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                averageMenuItemActionPerformed(evt);
            }
        });
        levelMenu.add(averageMenuItem);

        goodMenuItem.setMnemonic('g');
        goodMenuItem.setText("Good");
        goodMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goodMenuItemActionPerformed(evt);
            }
        });
        levelMenu.add(goodMenuItem);

        expertMenuItem.setMnemonic('e');
        expertMenuItem.setText("Expert");
        expertMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expertMenuItemActionPerformed(evt);
            }
        });
        levelMenu.add(expertMenuItem);

        masterMenuItem.setMnemonic('m');
        masterMenuItem.setSelected(true);
        masterMenuItem.setText("Master");
        masterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                masterMenuItemActionPerformed(evt);
            }
        });
        levelMenu.add(masterMenuItem);

        gameMenu.add(levelMenu);
        gameMenu.add(separator4);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        gameMenu.add(exitMenuItem);

        menuBar.add(gameMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(checkerBoard, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(checkerBoard, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void blackHumanMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackHumanMenuItemActionPerformed
        checkersGame.setPlayerType(PlayerColor.BLACK, PlayerType.HUMAN);
    }//GEN-LAST:event_blackHumanMenuItemActionPerformed

    private void blackComputerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blackComputerMenuItemActionPerformed
        checkersGame.setPlayerType(PlayerColor.BLACK, PlayerType.COMPUTER);
    }//GEN-LAST:event_blackComputerMenuItemActionPerformed

    private void whiteHumanMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteHumanMenuItemActionPerformed
        checkersGame.setPlayerType(PlayerColor.WHITE, PlayerType.HUMAN);
    }//GEN-LAST:event_whiteHumanMenuItemActionPerformed

    private void whiteComputerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whiteComputerMenuItemActionPerformed
        checkersGame.setPlayerType(PlayerColor.WHITE, PlayerType.COMPUTER);
    }//GEN-LAST:event_whiteComputerMenuItemActionPerformed

    private void invertedMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invertedMenuItemActionPerformed
        checkerBoard.setInverted(invertedMenuItem.isSelected());
        checkerBoard.repaint();
    }//GEN-LAST:event_invertedMenuItemActionPerformed

    private void noviceMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noviceMenuItemActionPerformed
        checkersGame.setLevel(2);
    }//GEN-LAST:event_noviceMenuItemActionPerformed

    private void averageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_averageMenuItemActionPerformed
        checkersGame.setLevel(4);
}//GEN-LAST:event_averageMenuItemActionPerformed

    private void beginnerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beginnerMenuItemActionPerformed
        checkersGame.setLevel(1);
    }//GEN-LAST:event_beginnerMenuItemActionPerformed

    private void goodMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goodMenuItemActionPerformed
        checkersGame.setLevel(6);
    }//GEN-LAST:event_goodMenuItemActionPerformed

    private void expertMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expertMenuItemActionPerformed
        checkersGame.setLevel(8);
    }//GEN-LAST:event_expertMenuItemActionPerformed

    private void masterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_masterMenuItemActionPerformed
        checkersGame.setLevel(9);
    }//GEN-LAST:event_masterMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        if (checkersGame.isInitialState()) {
            System.exit(0);
        } else {
            if (JOptionPane.showConfirmDialog(this, "Are you sure you want to exit?", 
                    "Checkers", JOptionPane.OK_CANCEL_OPTION) == 0) {
                System.exit(0);
            }
        }
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (checkersGame.isInitialState()) {
            System.exit(0);
        } else {
            if (JOptionPane.showConfirmDialog(this, "Are you sure you want to exit?", 
                    "Checkers", JOptionPane.OK_CANCEL_OPTION) == 0) {
                System.exit(0);
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        if (!checkersGame.isInitialState()) {
            if (JOptionPane.showConfirmDialog(this, "Are you sure you want to start a new game?", 
                    "Checkers", JOptionPane.OK_CANCEL_OPTION) == 0) {
                checkersGame.newGame();
            }
        }
    }//GEN-LAST:event_newMenuItemActionPerformed

    private void checkerBoardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkerBoardMouseClicked
        if (checkersGame.getCurrentPlayerType() == PlayerType.HUMAN) {
            int index = checkerBoard.getFieldByPixelCoord(evt.getX(), evt.getY());
            if (index!=0) {
                if (checkerBoard.isSelected(index)) {
                    if (possibleUnselectSquares().contains(index)) {
                        checkerBoard.unselectField(index);
                    }
                } else {
                    if (possibleSelectSquares().contains(index)) {
                        checkerBoard.selectField(index);
                        // Check if a move is complete now..
                        for (final Move m : possibleMoves) {
                            if (m.getSquares().containsAll(checkerBoard.getSelectedFields()) && 
                                    checkerBoard.getSelectedFields().containsAll(m.getSquares())) {
                                checkerBoard.unselectAllFields();
                                checkersGame.executeMove(m);
                            }
                        }
                    }
                }
                checkerBoard.repaint();
            }
        }
    }//GEN-LAST:event_checkerBoardMouseClicked

    private void undoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoMenuItemActionPerformed
        checkersGame.undoMove();
    }//GEN-LAST:event_undoMenuItemActionPerformed
    
    /**
     * Return in a set all index numbers of squares that can be selected. This 
     * method is to be called from the checkBoardMouseClicked event handler.
     * @return Set containing all selectable squares.
     */
    private Set possibleSelectSquares() {
        HashSet<Integer> squares = new HashSet<Integer>();
        Set<Integer> selectedFields = checkerBoard.getSelectedFields();
        for (Move m : possibleMoves) {
            if (m.getSquares().containsAll(selectedFields) && m.length() > selectedFields.size()) {
                squares.add(m.squareAt(selectedFields.size()));
            }
        }
        return squares;
    }
    
    /**
     * Return in a set all index numbers of squares that can be unselected. This 
     * method is to be called from the checkBoardMouseClicked event handler.
     * @return Set containing all unselectable squares.
     */
    private Set possibleUnselectSquares() {
        HashSet<Integer> squares = new HashSet<Integer>();
        Set<Integer> selectedFields = checkerBoard.getSelectedFields();
        for (Move m : possibleMoves) {
            if (m.getSquares().containsAll(selectedFields) && selectedFields.size()>0) {
                squares.add(m.squareAt(selectedFields.size()-1));
            }
        }
        return squares;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Checkers().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButtonMenuItem averageMenuItem;
    private javax.swing.JRadioButtonMenuItem beginnerMenuItem;
    private javax.swing.JRadioButtonMenuItem blackComputerMenuItem;
    private javax.swing.JRadioButtonMenuItem blackHumanMenuItem;
    private javax.swing.JMenu blackMenu;
    private CheckerBoard checkerBoard;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JRadioButtonMenuItem expertMenuItem;
    private javax.swing.JMenu gameMenu;
    private javax.swing.JRadioButtonMenuItem goodMenuItem;
    private javax.swing.JCheckBoxMenuItem invertedMenuItem;
    private javax.swing.JMenu levelMenu;
    private javax.swing.JRadioButtonMenuItem masterMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JRadioButtonMenuItem noviceMenuItem;
    private javax.swing.JMenu playersMenu;
    private javax.swing.JSeparator separator1;
    private javax.swing.JSeparator separator2;
    private javax.swing.JSeparator separator3;
    private javax.swing.JSeparator separator4;
    private javax.swing.JMenuItem undoMenuItem;
    private javax.swing.JRadioButtonMenuItem whiteComputerMenuItem;
    private javax.swing.JRadioButtonMenuItem whiteHumanMenuItem;
    private javax.swing.JMenu whiteMenu;
    // End of variables declaration//GEN-END:variables

    public void update(Observable o, Object arg) {
        if (o == checkersGame) {
            // Update undo menu
            undoMenuItem.setEnabled(!checkersGame.isInitialState());
            
            // Update level menu
            beginnerMenuItem.setSelected(checkersGame.getLevel()==1);
            noviceMenuItem.setSelected(checkersGame.getLevel()==2);
            averageMenuItem.setSelected(checkersGame.getLevel()==4);
            goodMenuItem.setSelected(checkersGame.getLevel()==6);
            expertMenuItem.setSelected(checkersGame.getLevel()==8);
            masterMenuItem.setSelected(checkersGame.getLevel()==9);
            
            // Update playertype menu
            whiteHumanMenuItem.setSelected(checkersGame.getPlayerType(PlayerColor.WHITE)==PlayerType.HUMAN);
            whiteComputerMenuItem.setSelected(checkersGame.getPlayerType(PlayerColor.WHITE)==PlayerType.COMPUTER);
            blackHumanMenuItem.setSelected(checkersGame.getPlayerType(PlayerColor.BLACK)==PlayerType.HUMAN);
            blackComputerMenuItem.setSelected(checkersGame.getPlayerType(PlayerColor.BLACK)==PlayerType.COMPUTER);
            
            if (!checkersGame.isGameOver()) {
                gameHasEndedDialogShown = false;
                // Update the mouse cursor and generate vector of possible moves
                if (checkersGame.getCurrentPlayerType()==PlayerType.HUMAN) {
                    checkerBoard.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                    possibleMoves = checkersGame.generatePossibleMoves();
                    //possibleMoves = MoveGen.generatePossibleMoves(checkersGame.getBoard(), checkersGame.getCurrentPlayerColor());
                } else {
                    checkerBoard.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                }
            } else {
                checkerBoard.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                if (!gameHasEndedDialogShown) {
                    if (checkersGame.isWinner(PlayerColor.BLACK)) {
                        JOptionPane.showMessageDialog(this, "Black has won this game.", "Checkers", JOptionPane.PLAIN_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "White has won this game.", "Checkers", JOptionPane.PLAIN_MESSAGE);
                    }
                    gameHasEndedDialogShown = true;
                }
            }
        }
    }
}
